#!/usr/bin/env bash

########################################################        HEADER CODE        ########################################################
#
#						Colors
#
# bold
bred="printf \033[1;31m"
bgreen="printf \033[1;32m"
bblue="printf \033[1;34m"
bwhite="printf \033[1;37m"
# high intensity
ired="printf \033[0;91m"
igreen="printf \033[0;92m"
iblue="printf \033[0;94m"
iwhite="printf \033[0;97m"
# no color
off="printf \033[0m"

#
#						Variables
#
distroName="$(cat /etc/*-release | grep -w "NAME")"
distroPrettyName="$(cat /etc/*-release | grep -w "PRETTY_NAME" | sed "s/PRETTY_NAME=//")"
installDirectory="$(pwd)/xmrig"
AutoBuild="$installDirectory/AutoBuild"
deps="$AutoBuild/deps"
libBuild="$AutoBuild/libBuild"
stableColor="\033[0;90m[Stable]"
latestColor="\033[0;90m[Latest]"
configColor="\033[0;90m[Config]"
pathColor="\033[0;90m[Path]"
cleanColor="\033[0;90m[Clean]"
depsColor="\033[0;90m[Dependencies]"
quietColor="\033[0;90m[Quiet]"
libreColor="\033[0;90m[Libre]"
forceColor="\033[0;90m[Force]"
build0="[0/6] Removing old /xmrig/ folder"
build1="[1/6] Pulling XMRig"
build2="[2/6] Creating Build Folders"
build3="[3/6] Building Libuv"
build4="[4/6] Building Hwloc"
build5="[5/6] Building OpenSSL"
build6="[6/6] Building XMRig"

colorAll_1="$stableColor $latestColor $configColor $pathColor $cleanColor"
colorAll_2="$depsColor $quietColor $libreColor $forceColor"

#
#						Build Dependency Install Functions
#
Apt_Build_Dependencies(){ sudo apt install git wget build-essential cmake automake libtool autoconf ;}
Pacman_Build_Dependencies(){ sudo pacman -S git wget base-devel cmake ;}
DNF_Build_Dependencies(){ sudo dnf install -y git wget make cmake gcc gcc-c++ libstdc++-static automake libtool autoconf ;}

#
#						Prompt/Message Functions
#
YES_no()
{
	$off
	read yn
	if [[ $yn = "" || $yn = "y" || $yn = "Y" ||$yn = "yes" || $yn = "Yes" ]]; then
		Yes
	else
		No
	fi
}
yes_NO()
{
	$off
	read yn
    if [[ $yn = "" || $yn = "n" || $yn = "N" ||$yn = "no" || $yn = "No" ]]; then
		No
	else
		Yes
	fi
}
Build_Message()
{
	if [[ $optionQuiet = "yes" ]]; then
		$bgreen; echo "$1" ;$off
	else
		$bgreen; echo "############      $1      ############" ;$off
	fi
}
End_Message()
{
	echo
	$bgreen; echo "##################################"
	$bgreen; echo "#   XMRig-Auto-Build complete!   #"
	$bgreen; echo "##################################"
	# shows different locations dependent on if source files are deleted or not
	if [[ $yn = "" || $yn = "y" || $yn = "Y" ||$yn = "yes" ||$yn = "Yes" ]]; then
	    $bblue; echo -n "XMRig Location: "
	    $iwhite; echo $installDirectory
	else
	    $bblue; echo "Location: "
	    $bwhite; echo -n "xmrig: " ;$iwhite; echo "$AutoBuild/xmrig"
	    $bwhite; echo -n "config.json: " ;$iwhite; echo "$AutoBuild/config.json"
	fi
	$off
}
Print_Help()
{
	$igreen; echo "XMRig-Auto-Build Usage:"
	$bwhite; echo -n "Interactive: "
	$off; echo "./XMRig-Auto-Build"
	$bwhite; echo -n "Options: "
	$off; echo "./XMRig-Auto-Build <option> <more options>"
	$off; echo
cat <<EOM
-S    --stable                Picks stable libraries
-L    --latest                Picks latest development libraries
-C    --config                Allows basic configuration of the config.json
-p    --path                  Sets install path:  --path=YOUR_PATH_HERE  or  -p=YOUR_PATH_HERE
-c    --clean                 Deletes all files except xmrig and config.json at end of build

-d    --deps                  Installs build dependencies
-q    --quiet                 Turns off verbose build messages (progress and errors are still shown)
-l    --libre                 Uses LibreSSL instead of OpenSSL
-f    --force                 Force overwrites if /xmrig/ folder already exists

XMRig-Auto-Build, made by: hinto.janaiyo
EOM
}

#
#						Build Functions
#
Build_Dependencies()
{
	case $foundPackageManager in
		apt)
			Apt_Build_Dependencies
			;;
		pacman)
			Pacman_Build_Dependencies
			;;
		dnf)
			DNF_Build_Dependencies
	esac
	if [[ $? != 0 ]]; then
	$bred; echo "Installing build dependencies failed, exiting..."
	exit
	fi
}
Overwrite_XMRig()
{
	if [[ $optionForce = "yes" || $overwrite = "yes" ]]; then
	    Build_Message "$build0"
	    rm -rf "$installDirectory" > /dev/null
	fi
}
Pull_XMRig()
{
	Build_Message "$build1"
	git clone https://github.com/xmrig/xmrig
}
Build_Folders()
{
	Build_Message "$build2"
	mkdir -p $AutoBuild
	mkdir -p $deps
	mkdir -p $deps/include
	mkdir -p $deps/lib
	mkdir -p $libBuild
}
Build_Libuv()
{
	Build_Message "$build3"
	local UV_VERSION="1.44.1"
	cd $libBuild
	if [[ $libVersion = "stable" ]]; then
		wget https://github.com/libuv/libuv/archive/v${UV_VERSION}.tar.gz -O v${UV_VERSION}.tar.gz
		tar -xzf v${UV_VERSION}.tar.gz
		cd libuv-${UV_VERSION}
	else
		git clone -b master https://github.com/libuv/libuv/
		cd libuv
	fi
	./autogen.sh
	./configure --disable-shared
	make -j$(nproc || sysctl -n hw.ncpu || sysctl -n hw.logicalcpu)
	mv -f include/* $deps
	mv -f .libs/libuv.a $deps/lib
}
Build_Hwloc()
{
	Build_Message "$build4"
	local HWLOC_VERSION="2.7.0"
	local HWLOC_V="v2.7"
	cd $libBuild
	if [[ $libVersion = "stable" ]]; then
		wget https://download.open-mpi.org/release/hwloc/$HWLOC_V/hwloc-${HWLOC_VERSION}.tar.gz -O hwloc-${HWLOC_VERSION}.tar.gz
		tar -xzf hwloc-${HWLOC_VERSION}.tar.gz
		cd hwloc-${HWLOC_VERSION}
	else
		git clone -b master https://github.com/open-mpi/hwloc
		cd hwloc
		./autogen.sh
	fi
	./configure --disable-shared --enable-static --disable-io --disable-libudev --disable-libxml2
	make -j$(nproc || sysctl -n hw.ncpu || sysctl -n hw.logicalcpu)
	mv -f include/* $deps
	mv -f hwloc/.libs/libhwloc.a $deps/lib
}
Build_OpenSSL()
{
	Build_Message "$build5"
	local OPENSSL_VERSION="1.1.1m"
	cd $libBuild
	if [[ $libVersion = "stable" ]]; then
		wget https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz -O openssl-${OPENSSL_VERSION}.tar.gz
		tar -xzf openssl-${OPENSSL_VERSION}.tar.gz
		cd openssl-${OPENSSL_VERSION}
	else
		git clone -b "OpenSSL_1_1_1-stable" https://github.com/openssl/openssl
		cd openssl
	fi
	./config -no-shared -no-asm -no-zlib -no-comp -no-dgram -no-filenames -no-cms
	make -j$(nproc || sysctl -n hw.ncpu || sysctl -n hw.logicalcpu)
	mv -f include/* $deps
	mv -f libcrypto.a $deps/lib
	mv -f libssl.a $deps/lib
}
Build_LibreSSL()
{
	Build_Message "[5/6] Building LibreSSL"
	local LIBRESSL_VERSION="3.4.2"
	cd $libBuild
	if [[ $libVersion = "stable" ]]; then
		wget https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-${LIBRESSL_VERSION}.tar.gz -O libressl-${LIBRESSL_VERSION}.tar.gz
		tar -xzf libressl-${LIBRESSL_VERSION}.tar.gz
		cd libressl-${LIBRESSL_VERSION}
	else
		git clone -b master https://github.com/libressl-portable/portable
		cd portable
		./autogen.sh
	fi
	./configure --disable-shared
	make -j$(nproc || sysctl -n hw.ncpu || sysctl -n hw.logicalcpu)
	mv -f include/* $deps
	mv -f crypto/.libs/libcrypto.a $deps/lib
	mv -f ssl/.libs/libssl.a $deps/lib
}
Build_XMRig()
{
	Build_Message "$build6"
	cd "$AutoBuild"
	cmake .. -DXMRIG_DEPS=$deps
	make -j$(nproc)
	cp "$installDirectory/src/config.json" $AutoBuild
}
Build_Fail()
{
	if [[ $? != 0 ]]; then
		$bred; echo "XMRig-Auto-Build failed building $1..."
		$bred; echo -n "Remove all XMRig-Auto-Build files? (Y/n) " ;$off
		Yes()
		{
			$iwhite; echo "Removing..."
			rm -rf "$AutoBuild" &&$green&& echo "Removed!"
		}
		No(){ $iwhite; echo "Skipping..." ;}
		YES_no
		$bred; echo -n "Remove /xmrig/ folder? (Y/n) " ;$off
		Yes()
		{
			$iwhite; echo "Removing..."
			rm -rf "$installDirectory" &&$green&& echo "Removed!"
		}
		No(){ $iwhite; echo "Skipping..." ;}
		YES_no
		$ired; echo "Exiting XMRig-Auto-Build: $1 failed to build..."
		exit
	fi
}
Build_All()
{
	Overwrite_XMRig;Pull_XMRig;Build_Fail "XMRig"
	Build_Folders;Build_Fail "Folders"
	Build_Libuv;Build_Fail "Libuv"
	Build_Hwloc;Build_Fail "Hwloc"
	if [[ $optionLibre = "yes" ]]; then
		Build_LibreSSL;Build_Fail "LibreSSL"
	else
		Build_OpenSSL;Build_Fail "OpenSSL"
	fi
	Build_XMRig;Build_Fail "XMRig"
	if [[ $optionClean = "yes" ]]; then
		Clean
		yn="y"
	fi
	End_Message
	exit
}
Build_Quiet()
{
	if [[ $optionForce = "yes" ]]; then
		Build_Message "$build0"
		Overwrite_XMRig >/dev/null 2>&1
	fi
	Build_Message "$build1";Pull_XMRig >/dev/null 2>&1;Build_Fail "XMRig"
	Build_Message "$build2";Build_Folders >/dev/null 2>&1;Build_Fail "Folders"
	Build_Message "$build3";Build_Libuv >/dev/null 2>&1;Build_Fail "Libuv"
	Build_Message "$build4";Build_Hwloc >/dev/null 2>&1;Build_Fail "Hwloc"
	if [[ $optionLibre = "yes" ]]; then
		Build_Message "[5/6] Building LibreSSL";Build_LibreSSL >/dev/null 2>&1;Build_Fail "LibreSSL"
	else
		Build_Message "$build5";Build_OpenSSL >/dev/null 2>&1;Build_Fail "OpenSSL"
	fi
		Build_Message "$build6";Build_XMRig >/dev/null 2>&1;Build_Fail "XMRig"
	if [[ $optionClean = "yes" ]]; then
		Clean
		yn="y"
	fi
	End_Message
	exit
}

#
#						Package Manager Search Function
#
Search_For_PackageManager()
{
	local packageManager="$1"
	if [[ -f $packageManager ]]; then
		$bgreen; echo -n "$distroPrettyName"
		$iwhite; echo -n " detected: using "
		$bgreen; echo "$2"
		found="yes"
		foundPackageManager="$2"
		$off
	fi
}
Which_Package_Manager()
{
	Search_For_PackageManager "/usr/bin/apt" "apt" || exit
	Search_For_PackageManager "/usr/bin/pacman" "pacman" || exit
	Search_For_PackageManager "/usr/bin/dnf" "dnf" || exit
	if [[ $found != "yes" ]]; then
		$bred; echo "Package Manager not found/supported!"
		$ired; echo "Exiting..."
		exit
	fi
}

#
#						Option Function
#
Clean()
{
	$iwhite; echo "Cleaning up..." ;$off
	tmp="$installDirectory/tmp_autobuild"
	mkdir "$tmp"
	mv "$AutoBuild/xmrig" "$tmp"
	mv "$installDirectory/src/config.json" "$tmp"
	cd $installDirectory
	ls | grep -v "tmp_autobuild" | xargs rm -rf > /dev/null
	rm -rf .git .github .gitignore > /dev/null
	mv "$tmp/xmrig" $installDirectory
	mv "$tmp/config.json" $installDirectory
	rm -rf "$tmp" > /dev/null
}

########################################################        START OF QUICK BUILD        ########################################################
# stupid way of skipping
if [[ $1 != "" ]]; then

#
#						Options
#
for optionChoices in $@ ;do
	case $optionChoices in
		--stable|-S)
			optionStable="yes"
			stableColor="\033[1;32m[Stable]"
			libVersion="stable"
			;;
		--latest|-L)
			optionLatest="yes"
			latestColor="\033[1;32m[Latest]"
			libVersion="latest"
			;;
		--config|-C)
			optionConfig="yes"
			configColor="\033[1;32m[Config]"
			;;
		--clean|-c)
			optionClean="yes"
			cleanColor="\033[1;32m[Clean]"
			;;
		--libre|-l)
			optionLibre="yes"
			libreColor="\033[1;32m[Libre]"
			;;
		--deps|-d)
			optionDeps="yes"
			depsColor="\033[1;32m[Dependencies]"
			;;
		--path=*)
			optionPath="yes"
			pathColor="\033[1;32m[Path]"
			pathLong="yes"
			;;
		-p=*)
			optionPath="yes"
			pathColor="\033[1;32m[Path]"
			pathShort="yes"
			;;
		--quiet|-q)
			optionQuiet="yes"
			quietColor="\033[1;32m[Quiet]"
			;;
		--force|-f)
			optionForce="yes"
			forceColor="\033[1;32m[Force]"
			;;
		--help|-h)
			optionHelp="yes"
			;;
		*)
			$ired; echo "XMRig-Auto-Build: invalid options!"
			$off; echo "for help: ./XMRig-Auto-Build --help"
			exit
	esac
done
# help option
if [[ $optionHelp = "yes" ]]; then
	Print_Help
	exit
fi

# library error
if [[ $optionStable != "yes" && $optionLatest != "yes" ]]; then
	$ired; echo "XMRig-Auto-Build: pick a library version!"
	exit
fi
# multiple library error
if [[ $optionStable = "yes" && $optionLatest = "yes" ]]; then
    $ired; echo "XMRig-Auto-Build: pick only 1 library version!"
	exit
fi
# really really really stupid way to filter input for path
if [[ $optionPath = "yes" ]]; then
	for i in $@ ;do
		if [[ $pathLong = "yes" ]]; then
			inputPath="$(echo $i | grep -- --path= | sed 's/--path=//g')"
			if [[ $inputPath = *"/"* ]]; then
				break
			fi
		elif [[ $pathShort = "yes" ]]; then
			inputPath="$(echo $i | grep -- -p= | sed 's/-p=//g')"
			if [[ $inputPath = *"/"* ]]; then
				break
			fi
		fi
	done
	installDirectory="$inputPath/xmrig"
	if [[ ! -d $inputPath ]]; then
		$ired; echo "XMRig-Auto-Build: install path does not exist!"
		exit
	fi
fi

colorAll_1="$stableColor $latestColor $configColor $pathColor $cleanColor"
colorAll_2="$depsColor $quietColor $libreColor $forceColor"

#
#						Quick Build Functions
#
Quick_Build_Prompt()
{
	$bred; echo "                 XMRig-Auto-Build                  "
	$bred; echo "###################################################"
	$bred; echo "                      Options:"
	$off; echo -e "    $colorAll_1"
	$off; echo -e "$colorAll_2"
	echo
	$bred; echo -n "Install path: "
	$bwhite; echo "$installDirectory"
	echo
	$bred; echo "                 Start Build? (Y/n)"
	$bred; echo "###################################################"
	echo -n "                        "
}

#
#						Quick Build
#
Quick_Build_Prompt
Yes()
{
	# /xmrig/ check
	if [[ $optionForce != "yes" ]]; then
		if [[ -d "$installDirectory" ]]; then
			$ired; echo -n "Folder: "
			$bwhite; echo -n "$installDirectory"
			$ired; echo " already exists!"
			$ired; echo "Exiting..."
			exit
		fi
	fi
	# build dependencies
	if [[ $optionDeps = "yes" ]]; then
		Search_For_PackageManager
		Which_Package_Manager
		Build_Dependencies
	fi
	# actual build
	if [[ $optionQuiet = "yes" ]]; then
		Build_Quiet
	else
		Build_All
	fi
}
No(){ $ired; echo "Exiting..." ;exit;}
YES_no

# stupid way of skipping
fi

########################################################                END OF QUICK BUILD        ########################################################
########################################################        START OF INTERACTIVE BUILD        ########################################################

#
#						Initial Prompt
#
$bgreen; echo "########################"
$bgreen; echo "#   XMRig-Auto-Build   #"
$bgreen; echo "########################"
$bblue; echo -n "Install into "
$bwhite; echo -n "${installDirectory}? "
$bblue; echo -n "(Y/n) " ;$off
Yes(){ $iwhite; echo "Starting..." ;}
No(){ $ired; echo "Exiting..." ;exit; }
YES_no

#
#						Check If /xmrig/ Already Exists
#
if [[ -d "$installDirectory" ]]; then
	$ired; echo -n "Folder: "
	$bwhite; echo -n "$installDirectory"
	$ired; echo " already exists!"
	$ired; echo -n "Continue anyway? (y/N) "
	Yes()
	{
		$iwhite; echo "Continuing!"
		overwrite="yes"
	}
	No(){ $ired; echo "Exiting..." ;exit;}
	yes_NO
fi

#
#						Finding Package Manager (apt, pacman, dnf)
#
Search_For_PackageManager
Which_Package_Manager

#
#						Installing Dependencies
#
$bblue; echo -n "Install build dependencies? (Y/n) " ;$off
Yes(){ Build_Dependencies ;}
No(){ $iwhite; echo "Skipping build dependencies..." ;}
YES_no

#
#						Pick Library Build Version
#
Lib_Yesno()
{
	$bblue; echo -n "Use "
	$bgreen; echo -n "[$libVersion]? "
	$bblue; echo -n "(Y/n) "
	read yn
	if [[ $yn = "" || $yn = "y" || $yn = "Y" ||$yn = "yes" ||$yn = "Yes" ]]; then
		finalChoice="yes"
	fi
}
while true; do
	$bblue; echo -n "Which library versions to build? "
	$bgreen; echo -n "[ Stable / latest ] " ;$off
	read answer
	case $answer in
		"")
			libVersion="stable"
			Lib_Yesno
			[[ $finalChoice = "yes" ]]&&break
			;;
		Stable|stable)
			libVersion="stable"
			Lib_Yesno
			[[ $finalChoice = "yes" ]]&&break
			;;
		Latest|latest)
			libVersion="latest"
			Lib_Yesno
			[[ $finalChoice = "yes" ]]&&break
			;;
		*)
			$ired; echo "Error, please type valid version"
			;;
		esac
done
$iwhite; echo "[$libVersion] selected..."

#
#						Build Commands
#
$bred; echo "#####################################"
$bred; echo "#   Start XMRig-Auto-Build? (Y/n)   #"
$bred; echo "#####################################"
$off
Yes(){ $iwhite; echo "Starting..." ;$off; }
No(){ $ired; echo "Exiting..." ;$off;exit; }
YES_no

Overwrite_XMRig
Pull_XMRig && Build_Folders
Build_Libuv
Build_Fail "Libuv"
Build_Hwloc
Build_Fail "Hwloc"
if [[ $foundPackageManager = "dnf" ]]; then
	Build_LibreSSL
	Build_Fail "LibreSSL"
else
	Build_OpenSSL
	Build_Fail "OpenSSL"
fi
Build_XMRig
Build_Fail "XMRig"

echo
$bgreen; echo "XMRig-Auto-Build done!"
$bblue; echo -n "Delete source code? (leaves xmrig and config.json) (Y/n) " ;$off

# moves xmrig/config.json into /xmrig/tmp_autobuild/, deletes everything in /xmrig/, then moves them back and deletes /xmrig/tmp_autobuild/
Yes(){ Clean ;}
No(){ $iblue; echo "Skipping cleanup..." ;}
YES_no

#
#						End
#
End_Message

########################################################        END OF INTERACTIVE BUILD        ########################################################
